import { createSlice } from "@reduxjs/toolkit";

export interface AuthState {
    isAuthorized: boolean;
    userDetails: any;
    JWT: string | null;
    status: "idle" | "loading" | "failed" | "success" | "checkedAuth";
}

// Initial state for the authentication slice
const initialState: AuthState = {
    isAuthorized: false,
    userDetails: null,
    JWT: localStorage.getItem("stoken") ? localStorage.getItem("stoken") : null,
    status: "idle",
};

// Create the authentication slice using Redux Toolkit
export const authSlice = createSlice({
    name: "authSlice",
    initialState,
    reducers: {
        // Action to set JWT and store it in local storage
        setJWT: (state, action) => {
            localStorage.setItem("stoken", action.payload);
            state.JWT = action.payload;
        },

        // Action to retrieve JWT from local storage
        getJWTFromStorage: (state) => {
            const token = localStorage.getItem("stoken");
            state.JWT = token;
        },
        // Action to set the status of authentication
        setStatus: (state, action) => {
            state.status = action.payload;
        },
        // Action to log out and clear authentication state
        logOut: (state) => {
            localStorage.removeItem("stoken");
            state.isAuthorized = false;
            state.userDetails = null;
            state.JWT = null;
        },
    },
});

// Export individual actions from the authentication slice
export const { setJWT, getJWTFromStorage, setStatus, logOut } =
    authSlice.actions;

// Export the reducer function generated by createSlice
export default authSlice.reducer;
